--[[
;------------------------------------  
; Script Name: Journal.txt
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Recreating the EasyUO #jIndex 
;   and #journal combination that made
;   journal scanning such an easy task.
; Dependancies:
;   Class.txt
;   DateTime.txt
; Copyright: 2010 Stuby085
;------------------------------------
]]

--[[
Reading the journal is one of the top needs for most scripts.  EasyUO has provided #journal as a way of reading a journal line for sometime.  Later versions included #jIndex as a rock solid method of keeping track of items that had already been read.  Unfortunately, Open EasyUO no longer has these variables.  However, Cheffe has provided everything we need to duplicate their functionality.  This class is does just that.  The class is very simple with only two functions and one index (aside from Class inherited items).


[color=blue]Blue[/color] text denotes a function or property.
[color=red]Red[/color] text denotes a required parameter for a function.
[color=orange]Orange[/color] text denotes an option parameter for a function.


[size=15][color=blue][b]Diagnostics.JournalOutputEnabled[/b][/color][/size]
	A boolean value stating whether or not diagnostics print() messages should be displayed.  It is useful for tracking down bugs and will likely not be used by most.  Default value is false.


[size=15][color=blue][b]Mark[/b][/color]()[/size]
	Marks the current journal location as the new starting location for future Search() requests.  It returns the journal reference (a number) that it marked.


[size=15][color=blue][b]Search[/b][/color]([color=red]messages[/color], [color=orange]timeoutInMilliseconds[/color], [color=orange]startingReference[/color])[/size]
	Searches the journal for text phrases.  The parameter "messages" represents the text phrases to find within the journal.  It can be either a string or a table of strings.  "timeoutInMilliseconds" is the maximum number of seconds to search the journal before failing.  Default value is 10000, or 10 seconds.  The last parameter, "startingReference", is the journal reference to use as the search start index.  If not provided, the method will use the last Mark()-ed reference.  If Mark() has not been called, it will start seraching from the very beginning of the journal.

        The function can return two different types of data.  If one of the text phrases is found, then the text phrase is returned.  Otherwise, a string, "ERR_Timeout", and a number, the last journal reference searched, is returned.



The following indexes and functions are available through the inherency of the Class object.

[size=15][color=blue][b]ClassName[/b][/color][/size]
	The name, a string, of the represented concept, usually a noun.


[size=15][color=blue][b]BaseClass[/b][/color][/size]
	The base class/table of the executing instance.


[size=15][color=blue][b]GetIndexValue[/b][/color]([color=red]indexName[/color])[/size]
	Retrieves the value of an index without invoking MetaDataRetrieval event, providing one is specified.


[size=15][color=blue][b]SetIndexValue[/b][/color]([color=red]indexName[/color], [color=red]newValue[/color])[/size]
	Sets an index to the provided value without invoking MetaDataChange events.


[size=15][color=blue][b]PrintMetaData[/b][/color]()[/size]
	Prints a list of all metadata, including that of base classes, for the instance of the class.


[size=15][color=blue][b]MetaDataRetrievalEvents[/b][/color][/size]
	A table of functions called when a metadata object is read from the instance of the class.  If an event is declared for the specified index, then the event fires instead of directly retrieving the index's value.

	Functions are provided the same parameters passed into the Lua's __index function; That is, a table and a string.  The table is the table whoseindex is being searched.  The string is the name of the key trying to be located.  Functions are expected to provide a single return argument, i.e. the value of the index.  To obtain indexes without going through events, use GetIndexValue.


[size=15][color=blue][b]MetaDataChangeEvents[/b][/color][/size]
	A table of functions called with a metadata's value is about to change.  If an event is declared for the index, then instead of changing the index's value, the event function is fired.

	Functions are provided the same parameters passed into the Lua's __newindex function.  They are a table, a string, and an object.  The table is the table that owns the index.  The string is the name of the index being changed.  Finally, the object is the new value of the index.  Functions are expected to handle setting the index to the new value themselves.  In order to keep structural integrity of the events, don't use rawset.  Instead, call SetIndexValue.  Function return values are ignored.



This class relies on my [url=http://www.easyuo.com/forum/viewtopic.php?t=44638]Class[/url] and [url=http://www.easyuo.com/forum/viewtopic.php?t=44680]DateTime[/url] objects.
]]


if Journal ~= nil then
  return
end

dofile("Class.txt")
dofile("DateTime.txt")


--[[ 
  Create the Journal class, inheriting a simple diagnostics table.
]]
Journal = Class.Create("Journal",
  {
    ClassName = "JournalDiagnositics",
    Diagnostics = 
    {
      -- Should journal diagnostics be displayed?
      JournalOutputEnabled = false,
      
      -- This is increased once per execution of Search().
      IndentDepth = 1,
      IncreaseIndentDepth =
        function()
          Journal.Diagnostics.IndentDepth = Journal.Diagnostics.IndentDepth + 1
        end
    }
  })


--[[ 
;------------------------------------ 
; Method Name: Mark
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Marks the current location
;   of the journal as the new starting
;   location for future Search() requests.
; Parameters:
; Return Values:
;   number A new journal referenence.
; Copyright: 2010 Stuby085
;------------------------------------
]]
Journal.Mark = function()  
  if Journal.Reference == nil then
    Journal.Reference = UO.ScanJournal(0)  
  end

  Journal.Reference = UO.ScanJournal(Journal.Reference)
  return Journal.Reference
end


--[[ 
;------------------------------------ 
; Method Name: OutputDiagnostics
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Displays a diagnostics
;   message, only if Diagnostics.
;   JournalOutputEnabled is true.
; Parameters:
;   @diagnosticsMessage The text to be displayed.
;   @increaseIndent True if the indent should be increased, false otherwise.
; Return Values:
; Copyright: 2010 Stuby085
;------------------------------------
]]
Journal.OutputDiagnostics = function(diagnosticsMessage, increaseIndent)
  if Journal.Diagnostics.JournalOutputEnabled == true then
    if increaseIndent == true then
      Journal.Diagnostics.IncreaseIndentDepth()
    end
    
    -- local indent = string.rep("  ", Journal.Diagnostics.IndentDepth)
    -- print(indent .. diagnosticsMessage)
    print("(" .. tostring(Journal.Diagnostics.IndentDepth) .. ") " .. diagnosticsMessage)
  end
end


--[[ 
;------------------------------------ 
; Method Name: Search
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Searches the journal for text phrases.
; Parameters:
;   @messages The text phrases to find within the journal.  It can be either a string or a table of strings.
;   @timeoutInMilliseconds The maximum number of seconds to search the journal before failing.  Default value is 10000, or 10 seconds.
;   @startingReference The journal reference to use as the search start index.  If not provided, the method will use the last Mark()-ed reference.  If Mark() has not been called, it will start seraching from the very beginning of the journal.
; Return Values:
;  string The text phrase that was found in the journal.  If no text phrase was found and a timeout occured, "ERR_Timeout" is returned.
;  number The last journal reference searched if a timeout occured, nil otherwise.
; Copyright: 2010 Stuby085
;------------------------------------
]]
Journal.Search = function(messages, timeoutInMilliseconds, startingReference)

  if type(messages) == "string" then
    messages = { messages }
  end
  assert(type(messages) == "table", "Parameter \"messages\" is expected to be a string or a table of strings.")
  
  if timeoutInMilliseconds == nil or type(timeoutInMilliseconds) ~= "number" or timeoutInMilliseconds < 1000 then
    timeoutInMilliseconds = 10000
  end
  
  if startingReference == nil or type(startingReference) ~= "number" then
    startingReference = 0
    
    local markedReference = Journal.Reference
    if markedReference ~= nil then
      startingReference = markedReference
    end
  end

  local timeout = timeoutInMilliseconds + DateTime.RunningMilliseconds
  repeat
    local newJournalReference, lineCount = UO.ScanJournal(startingReference)
    Journal.OutputDiagnostics("startingReference: " .. startingReference)
    Journal.OutputDiagnostics("newJournalReference: " .. newJournalReference)
    if newJournalReference ~= startingReference then
      Journal.Diagnostics.IncreaseIndentDepth()
      
      -- Scan journal entries  
      for journalIndex = lineCount - 1, 0, -1 do
        local journalEntry, textColor = UO.GetJournal(journalIndex)
        Journal.OutputDiagnostics(journalEntry)

        -- Check for each message parameter
        local messageCount = table.getn(messages)
        for messageIndex = 1, messageCount, 1 do
          local message = messages[messageIndex]
          
          -- Return message parameter if it is in the journal      
          if string.find(journalEntry, message) then
            return message
          end
              
        end -- for each message to find
      end -- for each journal entry
      
      Journal.Reference = newJournalReference
      startingReference = newJournalReference
    else
      wait(250)
    end
  until DateTime.RunningMilliseconds > timeout
  
  return "ERR_Timeout", startingReference  
end


--[[
Journal.Diagnostics.JournalOutputEnabled = true
local timeoutOccurred = true
Journal.Mark()
local successCheckTimeout = 10000 + DateTime.RunningMilliseconds
repeat
    
  for charCount = 1, math.random(1, 10) do
    UO.ExMsg(UO.CharID, 3, 9000, string.char(math.random(65, 81)))
  end
      
  if math.random(1, 10) == 1 then
    UO.ExMsg(UO.CharID, 3, 9000, "have not yet recovered")
  end
      
  local journalResult = Journal.Search({"location is blocked", "do not have that spell", "have not yet recovered"}, 1000)
  if journalResult ~= "ERR_Timeout" then
    print("Found journal message: " .. journalResult)
    timeoutOccurred = false      
  end
      
until timeoutOccurred == false or DateTime.RunningMilliseconds > successCheckTimeout
if timeoutOccurred == true then
  print("Journal search timeout occurred.")
end
]]