--[[
;------------------------------------  
; Script Name: Runebook.txt
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Provides the ability to 
;   travel using runebooks.  Eventually,
;   the class should provide any all
;   functionality of runebooks.   
; Dependancies:
;   Container.txt
;   Journal.txt
; Copyright: 2010 Stuby085
;------------------------------------
]]

--[[

Moving around the lands of Britainia is a cinch when you have a runebook.  This class takes full adavantage of that fact and provides the ability to travel via Sacred Journey or Recall.


[color=blue]Blue[/color] text denotes a function or property.
[color=red]Red[/color] text denotes a required parameter for a function.
[color=orange]Orange[/color] text denotes an option parameter for a function.


[size=15][color=blue][b]Create[/b][/color]([color=red]idOfRuneBook[/color], [color=red]travelMethod[/color])[/size]
	Creates an instance of the RuneBook class.  The parameter "idOfRuneBook" is exactly what you would think.  It represents the item id of the runebook to use for traveling.  "travelMethod" represents which method of travel ("SacredJourney" or "Recall") to use.


[size=15][color=blue][b]Diagnostics.RuneBookOutputEnabled[/b][/color][/size]
	A boolean value stating whether or not diagnostics print() messages should be displayed.  It is useful for tracking down bugs and will likely not be used by most.  Default value is false.


[size=15][color=blue][b]Travel[/b][/color]([color=red]runeBookId[/color], [color=red]runeNumber[/color], [color=red]travelMethod[/color], [color=orange]maxAttempts[/color])[/size]
	Uses a runebook to travel through Sosaria.  Parameters should be easy enough to figure out.  "runeBookId" is the item id of the runebook to use.  "runeNumber" is the rune (numbered 1 through 16, inclusively) to use.  "travelMethod" is the method of travel to use.  It may be "SacredJourney" or "Recall".  "maxAttempts" is the maximum number of attempts to try to travel before failing.  Its default value is 3.


Instances of the class have different Travel signature.

[size=15][color=blue][b]Travel[/b][/color]([color=red]runeNumber[/color], [color=orange]maxAttempts[/color])[/size]
	Descriptions of the function and function parameters are the same as above.



The following indexes and functions are available through the inherency of the Class object.

[size=15][color=blue][b]ClassName[/b][/color][/size]
	The name, a string, of the represented concept, usually a noun.


[size=15][color=blue][b]BaseClass[/b][/color][/size]
	The base class/table of the executing instance.


[size=15][color=blue][b]GetIndexValue[/b][/color]([color=red]indexName[/color])[/size]
	Retrieves the value of an index without invoking MetaDataRetrieval event, providing one is specified.


[size=15][color=blue][b]SetIndexValue[/b][/color]([color=red]indexName[/color], [color=red]newValue[/color])[/size]
	Sets an index to the provided value without invoking MetaDataChange events.


[size=15][color=blue][b]PrintMetaData[/b][/color]()[/size]
	Prints a list of all metadata, including that of base classes, for the instance of the class.


[size=15][color=blue][b]MetaDataRetrievalEvents[/b][/color][/size]
	A table of functions called when a metadata object is read from the instance of the class.  If an event is declared for the specified index, then the event fires instead of directly retrieving the index's value.

	Functions are provided the same parameters passed into the Lua's __index function; That is, a table and a string.  The table is the table whoseindex is being searched.  The string is the name of the key trying to be located.  Functions are expected to provide a single return argument, i.e. the value of the index.  To obtain indexes without going through events, use GetIndexValue.


[size=15][color=blue][b]MetaDataChangeEvents[/b][/color][/size]
	A table of functions called with a metadata's value is about to change.  If an event is declared for the index, then instead of changing the index's value, the event function is fired.

	Functions are provided the same parameters passed into the Lua's __newindex function.  They are a table, a string, and an object.  The table is the table that owns the index.  The string is the name of the index being changed.  Finally, the object is the new value of the index.  Functions are expected to handle setting the index to the new value themselves.  In order to keep structural integrity of the events, don't use rawset.  Instead, call SetIndexValue.  Function return values are ignored.



This class relies on my [url=http://www.easyuo.com/forum/viewtopic.php?t=44638]Container[/url] and [url=http://www.easyuo.com/forum/viewtopic.php?t=44680]Journal[/url] classes.  Both Journal and Container require [url=http://www.easyuo.com/forum/viewtopic.php?t=44638]Class[/url] and [url=http://www.easyuo.com/forum/viewtopic.php?t=44680]DateTime[/url].

]]

if RuneBook ~= nil then
  return  
end


-- Load file dependancies
dofile("Container.txt")
dofile("Journal.txt")


--[[
  Creates the RuneBook class, inheriting a basic diagnostics table.
]]
RuneBook = Class.Create("RuneBook", 
  {
    ClassName = "RuneBookDiagnostics",
    Diagnostics = { RuneBookOutputEnabled = false },
  })
  
--[[
  Declares variables used internally by the RuneBook class.
]]
RuneBook.Width = 452
RuneBook.Height = 236
RuneBook.Name = "generic gump"


--[[ 
;------------------------------------ 
; Method Name: ParseErrors
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Searches the journal for text phrases.
; Parameters:
;   @selfReferencedTravelResults A string result from Travel().  Determines if the result was an actual error or an acceptable return value.
; Return Values:
;  string The messaged results of the travel method.
; Copyright: 2010 Stuby085
;------------------------------------
]]
RuneBook.ParseErrors = function(selfReferencedTravelResults)
  if selfReferencedTravelResults == true then
    return true
  end
  
  local substring = string.sub(selfReferencedTravelResults, 0, 4)
  if substring ~= "ERR_" then
    return selfReferencedTravelResults
  end
  
  error(string.sub(selfReferencedTravelResults, 5)) -- , string.len(selfReferencedTravelResults) - 4))
end


--[[ 
;------------------------------------ 
; Method Name: Travel
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Uses a runebook to travel throughout the land of Sosaria.
; Parameters:
;   @runeBookId The item id of the runebook being used to travel.
;   @runeNumber The rune index used to travel.  Values range from 1 to 16 inclusively.
;   @travelMethod The name of the method used to travel.  Supported values include "Recall" and "SacredJourney".
;   @maxAttempts The maximum number of times to try traveling.  Default value is 3.
; Return Values:
;  boolean true if successful, a string message otherwise.
; Copyright: 2010 Stuby085
;------------------------------------
]]
RuneBook.Travel = function(runeBookId, runeNumber, travelMethod, maxAttempts)
  -- Make sure the rune number has been properly provided
  assert(type(runeNumber) == "number" and runeNumber >= 1 and runeNumber <= 16, "Parameter \"runeNumber\" must be a number between 1 and 16, inclusively.")

  -- Prepare the travel method  
  assert(travelMethod == "SacredJourney" or travelMethod == "Recall", "Parameter \"travelMethod\" must be a string value of SacredJourney or Recall.")
  
  -- Validate runeBookId parameter 
  assert( type(runeBookId) == "number", "Parameter \"runeBookId\" must be a number.")
                                                            
  if type(maxAttempts) ~= "number" or maxAttempts < 1 then
    maxAttempts = 3
  end
    
  local failedAttempts = 0
  local x
  local y
  local hasTakenStep = false
  
  while failedAttempts < maxAttempts do
  
    -- Close the active container if it matches the runebook size
    if Container.Width == RuneBook.Width and Container.Height == RuneBook.Height then
      RuneBook.OutputDiagnostics("Closing current container.")
      UO.ContPosX = 0
      UO.ContPosY = 0
      x = Container.X + Container.Width / 2
      y = Container.Y + Container.Height / 2
    
      -- Right click the active gump
      UO.Click(x, y, false, true, true, false)
      wait(500)
    end
  
    local individualActionTimeouts = 2000  
    local nextAction = -1
    local firstOpenAttempt = true  
    -- Open the runebook
    while Container.Name ~= RuneBook.Name or Container.Width ~= RuneBook.Width or Container.Height ~= RuneBook.Height do
      if failedAttempts >= maxAttempts then
        return "Unable to open runebook."
      end    
      if nextAction < DateTime.RunningMilliseconds then
        RuneBook.OutputDiagnostics("Openning runebook: " .. tostring(runeBookId))
        UO.LObjectID = runeBookId
        UO.Macro(17, 0)
        nextAction = individualActionTimeouts + DateTime.RunningMilliseconds
        if firstOpenAttempt ~= true then
          failedAttempts = failedAttempts + 1
        end
        firstOpenAttempt = false        
      end
      wait(50)
    end
    wait(250)
    
  
    --  Determine the click positions for the page number
    x = Container.X + 105 + ((math.floor(runeNumber / 2) + (runeNumber % 2)) * 35)
    if runeNumber > 8 then
      x = x + 30
    end
    y = Container.Y + 196

    -- Click the page number
    RuneBook.OutputDiagnostics("Clicking page number.")
    UO.Click(x, y, true, true, true, false)
    wait(250)

  
    -- Determine the click positions for the travel method
    x = UO.ContPosX + 135
    if runeNumber % 2 == 0 then
      x = x + 160
    end  
    y = UO.ContPosY + 144
    if travelMethod == "SacredJourney" then
      y = y + 36
    end

    -- Save the current position so we can verify the player moved
    local charPosX = UO.CharPosX
    local charPosY = UO.CharPosY
  
    -- Save the journal position so stop unneccessary journal scanning
    local journalReference = Journal.Mark()
   
    -- Click the travel method in the runebook
    RuneBook.OutputDiagnostics("Clicking travel method.")    
    UO.Click(x, y, true, true, true, false)
  
    -- Watch the journal for failure messages and the character position to determine success
    local successCheckTimeout = 5000 + DateTime.RunningMilliseconds
    local currentMilliseconds = -1
    repeat
      if UO.CharPosX ~= charPosX or UO.CharPosY ~= charPosY then
        RuneBook.OutputDiagnostics("Character position changed. Success!")
        return true
      end
      
      RuneBook.OutputDiagnostics("Scanning journal.")
      local journalResult = Journal.Search({"location is blocked", "do not have that spell", "have not yet recovered", "Tithing Points"}, 1000)
      if journalResult ~= "ERR_Timeout" then
        if journalResult == "have not yet recovered" then
          failedAttempts = failedAttempts + 1
          wait(1000)
          RuneBook.OutputDiagnostics("Not yet recovered, trying again.")
          break
        elseif journalResult == "location is blocked" then
          if hasTakenStep == false then
            RuneBook.OutputDiagnostics("Taking random step.")
            failedAttempts = failedAttempts + 1
            RuneBook.TakeRandomStep()                    
          else
            -- The character has already moved and the location is still blocked.
            -- It is unlikely that the spot will free within the next couple attempts
            failedAttempts = maxAttempts
          end
          
          break
        else
          RuneBook.OutputDiagnostics("Unhandled journal message: " .. journalResult)
          return journalResult      
        end
      end  
      
      currentMilliseconds = DateTime.RunningMilliseconds
    until currentMilliseconds > successCheckTimeout
    
    if currentMilliseconds > successCheckTimeout then
      failedAttempts = failedAttempts + 1
      if failedAttempts > maxAttempts then
        return "Journal Timeout"
      end 
      RuneBook.OutputDiagnostics("Journal reading timeout occured, trying again.")
    end  
  end

  return "Maximum attempts exceeded"
end


--[[ 
;------------------------------------ 
; Method Name: TakeRandomStep
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Takes a step in one of the eight available directions.
; Parameters:
; Return Values:
; Copyright: 2010 Stuby085
;------------------------------------
]]
RuneBook.TakeRandomStep = function()

  local minValue = 0
  local maxValue = 29999

  local success = false
  while success == false do
    
    local xOffset = 0
    local yOffset = 0
    while xOffset == 0 and yOffset == 0 do
    
      xOffset = math.random(minValue, maxValue) % 3
      if xOffset == 2 then
        xOffset = -1
      end

      yOffset = math.random(minValue, maxValue) % 3
      if yOffset == 2 then
        yOffset = -1
      end
    end
    
    local x = UO.CharPosX + xOffset
    local y = UO.CharPosY + yOffset

    success = UO.Move(x, y, 0, 2000)
    wait(500)
  end  
end


--[[ 
;------------------------------------ 
; Method Name: OutputDiagnostics
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Displays a diagnostics
;   message, only if Diagnostics.
;   RuneBookOutputEnabled is true.
; Parameters:
;   @diagnosticsMessage The text to be displayed.
; Return Values:
; Copyright: 2010 Stuby085
;------------------------------------
]]
RuneBook.OutputDiagnostics = function(diagnosticsMessage)
  if RuneBook.Diagnostics.RuneBookOutputEnabled == true then
    print(diagnosticsMessage)
  end
end


--[[ 
;------------------------------------ 
; Method Name: Create
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Creates an instance of the RuneBook class.
; Parameters:
;   @idOfRuneBook The item id of the runebook to use.
;   @travelMethod The travel method to use.  May be "Recall" or "SacredJourney".
; Return Values:
; Copyright: 2010 Stuby085
;------------------------------------
]]
local originalCreate = RuneBook.Create
RuneBook.Create = function(idOfRuneBook, travelMethod)
  assert(type(idOfRuneBook) == "number")
  assert(travelMethod == "SacredJourney" or travelMethod == "Recall")
  
  local returnValue = originalCreate()
  
  returnValue.Id = idOfRuneBook
  returnValue.TravelMethod = travelMethod
  
  returnValue.Travel = function(runeNumber, maxAttempts)
    local results = RuneBook.Travel(returnValue.Id, runeNumber, returnValue.TravelMethod, maxAttempts)
    return RuneBook.ParseErrors(results)
  end
  
  return returnValue
end

--[[
RuneBook.Diagnostics.RuneBookOutputEnabled = true
local runeBookId = 1079518067 
local testRuneBook = RuneBook.Create(runeBookId, "Recall")
local travelResult = testRuneBook.Travel(1)
print("Result: " .. tostring(travelResult))
]]