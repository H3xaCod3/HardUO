--[[ 
------------------------------------ 
; Script Name: Container.txt
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: This class is a wrapper of the
;   container variables for the UO table.
;   Its purpose is to provide increased 
;   code readability as well as provide 
;   basic gump support.
; Dependancies:
;   Script.txt
;   DateTime.txt
; Copyright: 2010 Stuby085
------------------------------------
]]

--[[
This class is a wrapper of the container variables for the UO table.  Its purpose is to provide increased code readability as well as provide basic gump support.


[color=blue]Blue[/color] text denotes a function or property.
[color=red]Red[/color] text denotes a required parameter for a function.
[color=orange]Orange[/color] text denotes an option parameter for a function.


[size=15][color=blue][b]Create[/b][/color]()[/size]
	Creates an instance of the Container class.  Unless it is for class inheritency, it is pointless in calling this function.  It will only duplicate the static Container class.


[size=15][color=blue][b]Id[/b][/color][/size]
	Returns the id of the currently selected container/gump.


[size=15][color=blue][b]X[/b][/color][/size]
	Returns the x-coordinate of the currently selected container/gump.  When set, it controls the horizontal position of the gump.


[size=15][color=blue][b]Y[/b][/color][/size]
	Returns the y-coordinate of the currently selected container/gump. When set, it controls the vertical position of the gump.


[size=15][color=blue][b]Width[/b][/color][/size]
	Returns the width of the currently selected container/gump.


[size=15][color=blue][b]Height[/b][/color][/size]
	Returns the height of the currently selected container/gump.


[size=15][color=blue][b]Kind[/b][/color][/size]
	Returns the kind of the currently selected container/gump.


[size=15][color=blue][b]Type[/b][/color][/size]
	Returns the object type of the currently selected container/gump.


[size=15][color=blue][b]Name[/b][/color][/size]
	Returns the name of currently selected container/gump.


[size=15][color=blue][b]IsStatusOpen[/b][/color][/size]
	Returns a boolean stating if the status gump is openned (true) or closed (false).  When the status is closed, some of the UO table's variables are not correctly populated (Name, Weight, Stats, etc.).


[size=15][color=blue][b]Open[/b][/color]([color=red]container[/color], [color=orange]timeout[/color], [color=orange]waitTimeBetweenOpenAttempts[/color], [color=orange]waitTimeBetweenSuccessChecks[/color])[/size]
	Opens a container.  The parameter "container" is the only required parameter.  If it is a number, it is assumed to be the item id of the item capable of openning the container gump.  It may also be one of the following strings: "paperdoll", "status", "backpack".

	The parameter "timeout" represents the maximum number of milliseconds to wait before determining the task is a failure.  Default value is 10000, or 10 seconds.

	The parameter "waitTimeBetweenOpenAttempts" represents the number of milliseconds to wait before attempting to open the container again, assuming another attempt is required.  Default value is 3000 or seconds.  If the value is too low, you will the "You must wait to perform that action" message from the server.

	Finally, the parameter "waitTimeBetweenSuccessChecks" is the number of milliseconds to wait after an attempt to open the container, before checking to see if it was openned.  This would be the lag time between openning the container and getting a gump to display.  The value only effects the processor usage of Open EasyUO.  Default value is 500, or half a second.

[size=15][color=blue][b]OpenBackpack[/b][/color]()[/size]
[size=15][color=blue][b]OpenPaperdoll[/b][/color]()[/size]
[size=15][color=blue][b]OpenStatus[/b][/color]()[/size]
	The above functions are overrides of Open().  There uses should be self explanatory.


[size=15][color=blue][b]OpenBackpack[/b][/color]([color=orange]x[/color], [color=orange]y[/color])[/size]
	Closes the current gump.  The variables x and y are both optional.  They represent the x and y offsets between the top left of the gump and the first top left visible pixel of the gump.  They are required only when a gump position does not match the top left visible pixel, such as the maximized status gump or backpack gump.


[size=15][color=blue][b]Move[/b][/color]([color=red]x[/color], [color=red]y[/color])[/size]
	Moves the current gump to the provided position.
	
	
[size=15][color=blue][b]Next.X[/b][/color][/size]
	Returns the x-coordinate of where the next container/gump will open.
        
         
[size=15][color=blue][b]Next.Y[/b][/color][/size]
	Returns the x-coordinate of where the next container/gump will open.
	

[size=15][color=blue][b]Next.SetPosition[/b][/color]([color=red]x[/color], [color=red]y[/color])[/size]
	Sets the location of where the next container/gump will open.
        


The following indexes and functions are available through the inherency of the Class object.

[size=15][color=blue][b]ClassName[/b][/color][/size]
	The name, a string, of the represented concept, usually a noun.


[size=15][color=blue][b]BaseClass[/b][/color][/size]
	The base class/table of the executing instance.


[size=15][color=blue][b]GetIndexValue[/b][/color]([color=red]indexName[/color])[/size]
	Retrieves the value of an index without invoking MetaDataRetrieval event, providing one is specified.


[size=15][color=blue][b]SetIndexValue[/b][/color]([color=red]indexName[/color], [color=red]newValue[/color])[/size]
	Sets an index to the provided value without invoking MetaDataChange events.


[size=15][color=blue][b]PrintMetaData[/b][/color]()[/size]
	Prints a list of all metadata, including that of base classes, for the instance of the class.


[size=15][color=blue][b]MetaDataRetrievalEvents[/b][/color][/size]
	A table of functions called when a metadata object is read from the instance of the class.  If an event is declared for the specified index, then the event fires instead of directly retrieving the index's value.

	Functions are provided the same parameters passed into the Lua's __index function; That is, a table and a string.  The table is the table whoseindex is being searched.  The string is the name of the key trying to be located.  Functions are expected to provide a single return argument, i.e. the value of the index.  To obtain indexes without going through events, use GetIndexValue.


[size=15][color=blue][b]MetaDataChangeEvents[/b][/color][/size]
	A table of functions called with a metadata's value is about to change.  If an event is declared for the index, then instead of changing the index's value, the event function is fired.

	Functions are provided the same parameters passed into the Lua's __newindex function.  They are a table, a string, and an object.  The table is the table that owns the index.  The string is the name of the index being changed.  Finally, the object is the new value of the index.  Functions are expected to handle setting the index to the new value themselves.  In order to keep structural integrity of the events, don't use rawset.  Instead, call SetIndexValue.  Function return values are ignored.



This class relies on my [url=http://www.easyuo.com/forum/viewtopic.php?t=44638]Class[/url] and [url=http://www.easyuo.com/forum/viewtopic.php?t=44680]DateTime[/url] objects.


As an aside, some of the above documentation came from the EasyUO wiki.  I thank the contributers who allowed me to save a few keystrokes.
]]





-- Don't load the class more than once.
if Container ~= nil then
  return
end


--[[
  Load external dependancies.
]]
dofile("Class.txt")
dofile("DateTime.txt")



--[[
  Create the Container object, inheriting from the Class object.
]]
Container = Class.Create("Container.lua")


--[[
  Setup the standard EasyUO variables for the container.
]]
local getterEvents = Container.MetaDataRetrievalEvents
getterEvents["Id"] = function() return UO.ContID end
getterEvents["X"] = function() return UO.ContPosX end
getterEvents["Y"] = function() return UO.ContPosY end
getterEvents["Width"] = function() return UO.ContSizeX end
getterEvents["Height"] = function() return UO.ContSizeY  end
getterEvents["Kind"] = function() return UO.ContKind end
getterEvents["Type"] = function() return UO.ContType end
getterEvents["Name"] = function() return UO.ContName end

local setterEvents = Container.MetaDataChangeEvents
setterEvents["X"] = function(instance, index, value) if type(value) == "number" then UO.ContPosX = value end end
setterEvents["Y"] = function(instance, index, value) if type(value) == "number" then UO.ContPosY = value end end


--[[
]]
getterEvents["IsStatusOpen"] = function() return UO.CharName ~= nil end



--[[ 
;------------------------------------ 
; Method Name: Open
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Opens a container.
; Parameters:
;   @container The container id to open or
;     one of following strings: "backpack",
;     "paperdoll", "status".
;   @timeout The number of milliseconds to
;     wait before determining the task to 
;     be a failure.
;   @waitTimeBetweenOpenAttempts The number
;     of milliseconds to wait before 
;     attempting to open the container 
;     again, assuming another attempt is 
;     required.
;   @waitTimeBetweenSuccessChecks The number
;     of milliseconds to wait after an 
;     attempt to open the container, before
;     checking to see if it was openned.
; Return Values:
; Copyright: 2010 Stuby085
;------------------------------------
]]
Container.Open = function(container, timeout, waitTimeBetweenOpenAttempts, waitTimeBetweenSuccessChecks)
  assert(container ~= nil, "Cannot open an unspecified container.")
  local containerType = type(container)
  if containerType == "string" then
    container = string.lower(container)
  elseif containerType ~= "number" then
    error("The \"container\" parameter must be of type string or number.")
  end
  
  local waitTimeBetweenOpenAttempts = waitTimeBetweenOpenAttempts or 3000
  local waitTimeBetweenSuccessChecks = waitTimeBetweenSuccessChecks or 1000
  local timeout = timeout or 10000
  local returnWaitTime = 500
  
  local containerNeedsOpennedCheck =
    function()
      return true
    end
    
  local openAction = 
    function()
      return false
    end
    
  if container == UO.CharID or container == "paperdoll" then
    containerNeedsOpennedCheck = function() return UO.ContName ~= "paperdoll gump" end
    openAction = function() UO.Macro(8, 1) end
  elseif container == UO.BackpackID or container == "backpack" then
    containerNeedsOpennedCheck = function() return UO.ContID ~= UO.BackpackID end
    openAction = function() UO.Macro(8, 7) end
  elseif container == "status" then
    containerNeedsOpennedCheck = function() return UO.ContName ~= "status gump" end
    openAction = function() UO.Macro(8, 2) end
  elseif containerType == "number" then
    containerNeedsOpennedCheck = function() return UO.ContID ~= container end
    openAction = function() UO.LObjectID = container UO.Macro(17, 0) end
  end
  
  local nextAction = -1
  local runningMilliseconds = -1
    
  timeout = timeout + DateTime.RunningMilliseconds
  while containerNeedsOpennedCheck() == true do
    runningMilliseconds = DateTime.RunningMilliseconds
    if timeout < runningMilliseconds then
      return false
    elseif nextAction < runningMilliseconds then
      openAction() 
      nextAction = waitTimeBetweenOpenAttempts + DateTime.RunningMilliseconds 
    end
    wait(waitTimeBetweenSuccessChecks)
  end
    
  wait(returnWaitTime)
  return
  
end

--[[
  Provide simple wrappers for common open parameters.
]]
Container.OpenBackpack = function()
  return Container.Open(UO.BackpackID)
end

Container.OpenStatus = function()
  return Container.Open("status")
end


Container.OpenPaperdoll = function()
  return Container.Open(UO.CharID)
end


--[[ 
;------------------------------------ 
; Method Name: Close
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Closes the current container.
; Parameters:
;   @x A number representing the offset
;     of points in the horizontal 
;     direction that should be added to
;     the container's horizontail postion
;     before attempting to close the gump.
;   @y A number representing the offset
;     of points in the vertical 
;     direction that should be added to
;     the container's vertical postion
;     before attempting to close the gump.
; Return Values:
;   boolean True if the gump changes,
;     false otherwise.
; Copyright: 2010 Stuby085
;------------------------------------
]]
Container.Close = function(x, y)
  local contName = UO.ContName
  if contName == "GameAreaEdgeGump" then
    return
  elseif contName == "paperdoll gump" then
    x = x or 35
    y = y or 35
  elseif contName == "status gump" then
    x = x or 55
    y = y or 45
  elseif UO.ContID == UO.BackpackID then
    x = x or 40
    y = y or 5
  end

  local id = UO.ContID
  local width = UO.ContSizeX
  local height = UO.ContSizeY
  local kind = UO.ContKind
  local type = UO.ContType
  local name = UO.ContName

  x = x or 0
  y = y or 0
  local clickX = x + UO.ContPosX + ((UO.ContSizeX - x) / 2)
  local clickY = y + UO.ContPosY + ((UO.ContSizeY - y) / 2)

  UO.Click(clickX, clickY, false, true, true, false)

  local timeout = 2000 + DateTime.RunningMilliseconds
  repeat
    if id ~= UO.ContID or width ~= UO.ContSizeX or height ~= UO.ContSizeY or type ~= UO.ContType or name ~= UO.ContName then
      return true
    end
    wait(100)
  until timeout < DateTime.RunningMilliseconds

  return false
end


--[[ 
;------------------------------------ 
; Method Name: Move
; Author: Stuby085
; Version: 1.0
; Client Tested with: 5.0.9.1 (Patch 46)
; EUO version tested with: OpenEUO 0.9s
; Shard OSI / FS: FS
; Revision Date: October 5, 2010
; Public Release: October 5, 2010
; Purpose: Changes the location of an 
;   onscreen container.
; Parameters:
;   @x The new x corridinate for the gump.
;   @y The new y corridinate for the gump.
; Return Values:
; Copyright: 2010 Stuby085
;------------------------------------
]]
Container.Move = function(x, y)
  assert(type(x) == "number")
  assert(type(y) == "number")

  UO.ContPosX = x
  UO.ContPosY = y
end


--[[
  Create the Container.Next table.
]]
local next = Class.Create("NextContainer")
Container.Next = next

--[[
  Provide functionality to preconfigure new container positions.
]]
getterEvents = next.MetaDataRetrievalEvents
getterEvents["X"] = function() return UO.NextCPosX end
getterEvents["Y"] = function() return UO.NextCPosY end

setterEvents = next.MetaDataChangeEvents
setterEvents["X"] = function(instance, index, value) if type(value) == "number" then UO.NextCPosX = value end end
setterEvents["Y"] = function(instance, index, value) if type(value) == "number" then UO.NextCPosY = value end end

next.SetPosition = function(x, y)
  assert(type(x) == "number")
  assert(type(y) == "number")
  
  UO.NextCPosX = x
  UO.NextCPosY = y
end


--[[
Container.Open("backpack")
Container.Close()
Container.Open(UO.BackpackID)
Container.Close()
Container.OpenBackpack()
Container.Close()

Container.Open("paperdoll")
Container.Close()
Container.OpenPaperdoll()
Container.Close()
Container.Open(UO.CharID)
Container.Close()

Container.Open("status")
Container.Close()
Container.OpenStatus()
Container.Close()
--]]